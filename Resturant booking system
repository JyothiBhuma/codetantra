const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 5000;

app.use(cors());
app.use(express.json());

let bookings = [];

// Create Booking
app.post('/api/bookings', (req, res) => {
    const { date, time, guests, name, contact } = req.body;
    if (!date || !time || !guests || !name || !contact) {
        return res.status(400).json({ message: 'All fields are required.' });
    }
    const bookingId = bookings.length + 1;
    const newBooking = { id: bookingId, date, time, guests, name, contact };

    // Prevent double booking
    const existingBooking = bookings.find(
        b => b.date === date && b.time === time
    );
    if (existingBooking) {
        return res.status(400).json({ message: 'Time slot already booked.' });
    }

    bookings.push(newBooking);
    res.status(201).json(newBooking);
});

// Get Bookings
app.get('/api/bookings', (req, res) => {
    res.json(bookings);
});

// Delete Booking
app.delete('/api/bookings/:id', (req, res) => {
    const { id } = req.params;
    bookings = bookings.filter(booking => booking.id !== parseInt(id));
    res.json({ message: 'Booking deleted.' });
});

app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));

// Frontend: Next.js
// Install dependencies: `npm install next react react-dom`

// File: pages/index.js
import React, { useState, useEffect } from 'react';

export default function Home() {
    const [bookings, setBookings] = useState([]);
    const [form, setForm] = useState({ date: '', time: '', guests: '', name: '', contact: '' });
    const [error, setError] = useState(null);

    useEffect(() => {
        fetch('http://localhost:5000/api/bookings')
            .then(res => res.json())
            .then(data => setBookings(data));
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);
        const response = await fetch('http://localhost:5000/api/bookings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(form),
        });

        if (response.ok) {
            const newBooking = await response.json();
            setBookings([...bookings, newBooking]);
            setForm({ date: '', time: '', guests: '', name: '', contact: '' });
        } else {
            const errorData = await response.json();
            setError(errorData.message);
        }
    };

    const handleDelete = async (id) => {
        const response = await fetch(`http://localhost:5000/api/bookings/${id}`, {
            method: 'DELETE',
        });

        if (response.ok) {
            setBookings(bookings.filter(booking => booking.id !== id));
        }
    };

    return (
        <div>
            <h1>Restaurant Table Booking</h1>
            <form onSubmit={handleSubmit}>
                <input
                    type="date"
                    value={form.date}
                    onChange={(e) => setForm({ ...form, date: e.target.value })}
                    required
                />
                <input
                    type="time"
                    value={form.time}
                    onChange={(e) => setForm({ ...form, time: e.target.value })}
                    required
                />
                <input
                    type="number"
                    placeholder="Guests"
                    value={form.guests}
                    onChange={(e) => setForm({ ...form, guests: e.target.value })}
                    required
                />
                <input
                    type="text"
                    placeholder="Name"
                    value={form.name}
                    onChange={(e) => setForm({ ...form, name: e.target.value })}
                    required
                />
                <input
                    type="tel"
                    placeholder="Contact"
                    value={form.contact}
                    onChange={(e) => setForm({ ...form, contact: e.target.value })}
                    required
                />
                <button type="submit">Book Now</button>
            </form>

            {error && <p style={{ color: 'red' }}>{error}</p>}

            <h2>Bookings</h2>
            <ul>
                {bookings.map((booking) => (
                    <li key={booking.id}>
                        {`${booking.name} - ${booking.date} ${booking.time} (${booking.guests} guests)`}
                        <button onClick={() => handleDelete(booking.id)}>Cancel</button>
                    </li>
                ))}
            </ul>
        </div>
    );
}
